# Basic ESPHome configuration for Della AC with SLWF-01
esphome:
  name: della-ac
  friendly_name: Della Mini Split

# ESP8266 platform configuration
esp8266:
  board: esp01_1m  # SLWF-01 typically uses ESP8266
  restore_from_flash: true
  early_pin_init: true

# WiFi credentials
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  
  # Optional fallback AP mode if WiFi connection fails
  ap:
    ssid: "Della AC Fallback"
    password: !secret fallback_password

# Enable logging
logger:
  level: VERBOSE  # Increased from DEBUG to VERBOSE for maximum detail
  baud_rate: 0  # Disable logging over serial port to avoid conflicts with UART
  logs:
    wifi: INFO  # WiFi connection status logs
    esp8266: INFO  # ESP8266 specific logs
    uart: VERBOSE  # Increased UART logs to VERBOSE
    climate: VERBOSE  # Increased climate logs to VERBOSE
    api: INFO  # API connection logs
    ota: INFO  # OTA update logs
    della_ac: VERBOSE  # Add specific logging for our component

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_encryption_key

# Enable OTA updates
ota:
  - platform: esphome
    password: !secret ota_password

# Enable Web server
web_server:
  port: 80

# UART Configuration for communicating with the AC
uart:
  id: ac_uart
  tx_pin: GPIO1  # Default TX pin for SLWF-01 dongle
  rx_pin: GPIO3  # Default RX pin for SLWF-01 dongle
  baud_rate: 9600
  parity: EVEN
  data_bits: 8
  stop_bits: 1
  rx_buffer_size: 512  # Increase buffer size for more reliable reception
  debug:
    direction: BOTH  # Log both TX and RX data
    dummy_receiver: false

# External components directory where we'll put our custom component
external_components:
  - source: components
    components: [della_ac]

# Use our custom component
climate:
  - platform: della_ac
    id: mini_split
    name: "Mini Split"
    uart_id: ac_uart 

# Add diagnostics buttons
button:
  - platform: restart
    name: "Mini Split ESP Restart"
    
  - platform: template
    name: "Force AC Update"
    on_press:
      then:
        - logger.log: "Sending AC status query"
        - delay: 100ms
        - uart.write:
            id: ac_uart
            data: [0xBB, 0x00, 0x01, 0x04, 0x02, 0x01, 0x00, 0xBD]
        - delay: 1s
        - logger.log: "Query complete"

  - platform: template
    name: "AC Info Dump"
    on_press:
      then:
        - logger.log:
            level: INFO
            format: "Temperature: %.1fÂ°C, Mode: %s, Fan: %s, Preset: %s"
            args: [id(mini_split).target_temperature, id(mini_split).mode, id(mini_split).fan_mode, id(mini_split).preset]

# Add system uptime for diagnostics
sensor:
  - platform: wifi_signal
    name: "WiFi Signal"
    update_interval: 60s
    
  - platform: uptime
    name: "Uptime"
    update_interval: 60s
    filters:
      - lambda: return x / 3600.0; # Convert to hours
    unit_of_measurement: "hours"

# Add device status information
text_sensor:
  - platform: wifi_info
    ip_address:
      name: "IP Address"
    ssid:
      name: "Connected SSID"

# Enable status LED (if available on your dongle)
status_led:
  pin:
    number: GPIO2  # Adjust this pin if needed for your specific SLWF-01 dongle
    inverted: yes  # Some LEDs are inverted 